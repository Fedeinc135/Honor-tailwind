{
  "name": "ratings",
  "dependencies": [],
  "files": [
    {
      "name": "ratings.tsx",
      "content": "import React from \"react\"\r\nimport { Star } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst ratingVariants = {\r\n  default: {\r\n    star: \"text-foreground\",\r\n    emptyStar: \"text-muted-foreground\",\r\n  },\r\n  destructive: {\r\n    star: \"text-red-500\",\r\n    emptyStar: \"text-red-200\",\r\n  },\r\n  yellow: {\r\n    star: \"text-yellow-500\",\r\n    emptyStar: \"text-yellow-200\",\r\n  },\r\n}\r\n\r\ninterface RatingsProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  rating: number\r\n  totalStars?: number\r\n  size?: number\r\n  fill?: boolean\r\n  Icon?: React.ReactElement\r\n  variant?: keyof typeof ratingVariants\r\n}\r\n\r\nconst Ratings = ({ ...props }: RatingsProps) => {\r\n  const {\r\n    rating,\r\n    totalStars = 5,\r\n    size = 20,\r\n    fill = true,\r\n    Icon = <Star />,\r\n    variant = \"default\",\r\n  } = props\r\n\r\n  const fullStars = Math.floor(rating)\r\n  const partialStar =\r\n    rating % 1 > 0 ? (\r\n      <PartialStar\r\n        fillPercentage={rating % 1}\r\n        size={size}\r\n        className={cn(ratingVariants[variant].star)}\r\n        Icon={Icon}\r\n      />\r\n    ) : null\r\n\r\n  return (\r\n    <div className={cn(\"flex items-center gap-2\")} {...props}>\r\n      {[...Array(fullStars)].map((_, i) =>\r\n        React.cloneElement(Icon, {\r\n          key: i,\r\n          size,\r\n          className: cn(\r\n            fill ? \"fill-current\" : \"fill-transparent\",\r\n            ratingVariants[variant].star\r\n          ),\r\n        })\r\n      )}\r\n      {partialStar}\r\n      {[...Array(totalStars - fullStars - (partialStar ? 1 : 0))].map((_, i) =>\r\n        React.cloneElement(Icon, {\r\n          key: i + fullStars + 1,\r\n          size,\r\n          className: cn(ratingVariants[variant].emptyStar),\r\n        })\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface PartialStarProps {\r\n  fillPercentage: number\r\n  size: number\r\n  className?: string\r\n  Icon: React.ReactElement\r\n}\r\nconst PartialStar = ({ ...props }: PartialStarProps) => {\r\n  const { fillPercentage, size, className, Icon } = props\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", display: \"inline-block\" }}>\r\n      {React.cloneElement(Icon, {\r\n        size,\r\n        className: cn(\"fill-transparent\", className),\r\n      })}\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 0,\r\n          overflow: \"hidden\",\r\n          width: `${fillPercentage * 100}%`,\r\n        }}\r\n      >\r\n        {React.cloneElement(Icon, {\r\n          size,\r\n          className: cn(\"fill-current\", className),\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { Ratings }\r\n"
    }
  ],
  "type": "components:ui"
}